name: Stable Build

on:
  push:
    branches:
      - master
  schedule:
    - cron: "0 0 * * 5"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 6000

    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          ref: master

      - name: Update Python
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get -y update
          sudo apt-get install -y wget
          sudo apt-get install -y python2 
          sudo rm -rf /usr/bin/python
          sudo ln -s /usr/bin/python2 /usr/bin/python

      - name: Install Repo
        run: |
          git clone https://github.com/nbnbnb/friendlyarm_repo
          sudo cp friendlyarm_repo/repo /usr/bin/

          wget -O - https://raw.githubusercontent.com/nbnbnb/build-env-on-ubuntu-bionic/refs/heads/master/install.sh | sudo bash     

          # 由于上面的脚本更新过包，下面需要再次更新 Python 引用
          sudo rm -rf /usr/bin/python
          sudo ln -s /usr/bin/python2 /usr/bin/python      

          # 使用指定版本 GCC
          sudo apt-get install g++-9 -y
          sudo apt-get install gcc-9 -y
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 50 --slave /usr/bin/g++ g++ /usr/bin/g++-9

      - name: Download Source
        run: |
          mkdir friendlywrt-s5p4418
          cd friendlywrt-s5p4418
          repo init -u https://github.com/nbnbnb/friendlywrt_mainfests -b 19_07_1 -m s5p4418.xml --repo-url=https://github.com/nbnbnb/friendlyarm_repo --no-clone-bundle
          repo sync -c --no-clone-bundle -j8

      - name: Mods
        run: |
          rm -rf friendlywrt-s5p4418/friendlywrt/package/network/services/hostapd
          cd friendlywrt-s5p4418/friendlywrt/tools/m4/patches
          wget https://raw.githubusercontent.com/keyfour/openwrt/2722d51c5cf6a296b8ecf7ae09e46690403a6c3d/tools/m4/patches/011-fix-sigstksz.patch

      - name: Build HelloWorld
        run: |

          cp stable_config friendlywrt-s5p4418/friendlywrt/.config 

          mkdir -p friendlywrt-s5p4418/friendlywrt/package/diy 
          cd friendlywrt-s5p4418/friendlywrt/package/diy 

          # diy - app-vssr
          git clone --depth 1 https://github.com/nbnbnb/luci-app-vssr.git 
          git clone --depth 1 https://github.com/nbnbnb/lua-maxminddb.git 
                  
          # diy - app-openclash
          git clone --depth 1 https://github.com/vernesong/OpenClash.git

          pushd OpenClash/luci-app-openclash/tools/po2lmo
          make && sudo make install
          popd

          cd ../..

          # diy - package-helloworld
          echo "src-git helloworld https://github.com/nbnbnb/helloworld.git;stable" >> "feeds.conf.default"

          # diy - package-passwall
          echo "src-git passwall https://github.com/xiaorouji/openwrt-passwall2.git;main" >> "feeds.conf.default"

          ./scripts/feeds clean && ./scripts/feeds update -a && ./scripts/feeds install -a
          make download -j8

          # go-version 1.13 to 1.21.3
          rm -rf feeds/packages/lang/golang
          cp -r ../../packages/lang/golang feeds/packages/lang/golang

          cd ..

          # 空间不够，清理
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y

          # 空间不够，清理
          rm -rf ./.repo/project-objects

          # start build
          ./build.sh nanopi_m2a.mk

      - name: Clean
        run: |
          # 再次清理空间，打包使用
          rm -rf friendlywrt-s5p4418/friendlywrt

      - name: Zip Files
        run: |
          find friendlywrt-s5p4418/out/ -name "FriendlyWrt_*.img" | xargs -i zip -r {}.zip {}

      - name: Assemble Artifact
        id: assemble_artifact
        run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          find friendlywrt-s5p4418/out/ -name "FriendlyWrt_*img.zip*" | xargs -i mv -f {} ./artifact/
          cp friendlywrt-s5p4418/friendlywrt/.config ./artifact/
          zip -r artifact.zip ./artifact/
          release_tag="Stable-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.repo_access }}
        with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.repo_access }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}.zip
          asset_content_type: application/zip
